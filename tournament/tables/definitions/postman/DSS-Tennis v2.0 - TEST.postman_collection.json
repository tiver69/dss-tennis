{
	"info": {
		"_postman_id": "73030b1e-5084-4995-94b8-af7b57767b3c",
		"name": "DSS-Tennis v2.0 | TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7420059"
	},
	"item": [
		{
			"name": "Manage Player",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"firstName\", jsonData.data.attributes.firstName);\r",
											"postman.setEnvironmentVariable(\"lastName\", jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player updated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.eql(environment.firstName);\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.eql(environment.lastName);\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"LEFT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1989);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 1999);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"firstName\", jsonData.data.attributes.firstName);\r",
											"postman.setEnvironmentVariable(\"lastName\", jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{playerId}}\",\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PatchTest-{{$timestamp}}\",\r\n        \"lastName\": \"PatchTest-{{$timestamp}}\",\r\n        \"birthDate\": \"1989-03-17\",\r\n        \"experienceYear\": \"1999\",\r\n        \"leadingHand\": \"LEFT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/{{playerId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"{{playerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Player retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).to.eql(environment.firstName);\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).to.eql(environment.lastName);\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"LEFT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1989);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 1999);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/players/{{playerId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"{{playerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Players | No Warnings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"First players page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.totalPages).to.not.eql(0);\r",
											"    pm.expect(jsonData.meta.currentPage).to.eql(1);\r",
											"    pm.expect(jsonData.meta.warnings).to.be.undefined;\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).to.eq(10);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var totalPages = jsonData.meta.totalPages;\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/participants/players?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.prev).is.undefined;\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/participants/players?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.next).to.eql(\"/participants/players?page=2&pageSize=10\");\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/participants/players?page=\" + totalPages + \"&pageSize=10\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/players?page=1&pageSize=10",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Players | Lower Bound Warning",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Meta returned correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.totalPages).to.not.eql(0);\r",
											"    pm.expect(jsonData.meta.currentPage).to.eql(1);\r",
											"    \r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(1);\r",
											"    pm.expect(jsonData.meta.warnings[0].code).to.eq(\"PAGE_OUT_OF_RANGE\");\r",
											"    pm.expect(jsonData.meta.warnings[0].detail).to.eq(\"Page number is out of range, using default value for request\");\r",
											"    pm.expect(jsonData.meta.warnings[0].source.parameter).to.eq(\"0\");\r",
											"    pm.expect(jsonData.meta.warnings[0].source.pointer).to.eq(\"?page\");\r",
											"});\r",
											"\r",
											"pm.test(\"First player's page returned correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).to.eq(10);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var totalPages = jsonData.meta.totalPages;\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/participants/players?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.prev).is.undefined;\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/participants/players?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.next).to.eql(\"/participants/players?page=2&pageSize=10\");\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/participants/players?page=\" + totalPages + \"&pageSize=10\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/players?page=0&pageSize=10",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Players | Upper Bound Warning Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Meta returned correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.totalPages).to.eql(jsonData.data.currentPage);\r",
											"\r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(2);\r",
											"\r",
											"    let pageOutOfRangeWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PAGE_OUT_OF_RANGE\")[0];\r",
											"    pm.expect(pageOutOfRangeWarning.code).to.eq(\"PAGE_OUT_OF_RANGE\");\r",
											"    pm.expect(pageOutOfRangeWarning.detail).to.eq(\"Page number is out of range, using max allowed value for request\");\r",
											"    pm.expect(pageOutOfRangeWarning.source.parameter).to.eq(\"9999\");\r",
											"    pm.expect(pageOutOfRangeWarning.source.pointer).to.eq(\"?page\");\r",
											"\r",
											"    let pageSizeOutOfRangeWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PAGE_SIZE_OUT_OF_RANGE\")[0];\r",
											"    pm.expect(pageSizeOutOfRangeWarning.code).to.eq(\"PAGE_SIZE_OUT_OF_RANGE\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.detail).to.eq(\"Page size is out of range, using default value for request\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.source.parameter).to.eq(\"11\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.source.pointer).to.eq(\"?pageSize\");\r",
											"});\r",
											"\r",
											"pm.test(\"Last player's page returned correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).not.to.eq(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var currentPage = jsonData.meta.currentPage;\r",
											"\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/participants/players?page=1&pageSize=5\");\r",
											"    pm.expect(jsonData.links.prev).to.eql(\"/participants/players?page=\" + (currentPage - 1) + \"&pageSize=5\");\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/participants/players?page=\" + currentPage + \"&pageSize=5\");\r",
											"    pm.expect(jsonData.links.next).is.undefined;\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/participants/players?page=\" + currentPage + \"&pageSize=5\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/players?page=9999&pageSize=11",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "11"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Required Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"\r",
											"    let firstNameError = jsonData.errors.filter(error => error.status == \"PLAYER_FIRST_NAME_EMPTY\")[0];\r",
											"    let lastNameError = jsonData.errors.filter(error => error.status == \"PLAYER_LAST_NAME_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstNameError).to.be.not.null;\r",
											"    pm.expect(firstNameError.status).to.eql(\"PLAYER_FIRST_NAME_EMPTY\");\r",
											"    pm.expect(firstNameError.code).to.eql(\"400\");\r",
											"    pm.expect(firstNameError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstNameError.detail).to.eql(\"First Name is required field\");\r",
											"    pm.expect(firstNameError.source.pointer).to.eql(\"/attributes/firstName\");\r",
											"\r",
											"    pm.expect(lastNameError).to.be.not.null;\r",
											"    pm.expect(lastNameError.status).to.eql(\"PLAYER_LAST_NAME_EMPTY\");\r",
											"    pm.expect(lastNameError.code).to.eql(\"400\");\r",
											"    pm.expect(lastNameError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(lastNameError.detail).to.eql(\"Last Name is required field\");\r",
											"    pm.expect(lastNameError.source.pointer).to.eql(\"/attributes/lastName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Illegal Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"    \r",
											"    let experienceYearError = jsonData.errors.filter(error => error.status == \"EXPERIENCE_YEAR_ILLEGAL\")[0];\r",
											"    let birthDateError = jsonData.errors.filter(error => error.status == \"BIRTH_DATE_ILLEGAL\")[0];\r",
											"\r",
											"    pm.expect(birthDateError.status).to.eql(\"BIRTH_DATE_ILLEGAL\");\r",
											"    pm.expect(birthDateError.code).to.eql(\"400\");\r",
											"    pm.expect(birthDateError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(birthDateError.detail).to.eql(\"Birth Date can't be in future\");\r",
											"    pm.expect(birthDateError.source.pointer).to.eql(\"/attributes/birthDate\");\r",
											"\r",
											"    pm.expect(experienceYearError.status).to.eql(\"EXPERIENCE_YEAR_ILLEGAL\");\r",
											"    pm.expect(experienceYearError.code).to.eql(\"400\");\r",
											"    pm.expect(experienceYearError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(experienceYearError.detail).to.eql(\"Experience year can't be in future\");\r",
											"    pm.expect(experienceYearError.source.pointer).to.eql(\"/attributes/experienceYear\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest-{{$timestamp}}\",\r\n        \"birthDate\": \"2999-03-17\",\r\n        \"experienceYear\": \"3009\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Invalid Format Exeption",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"/attributes/leadingHand\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"MIDDLE\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"MIDDLE\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"404\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Player not found\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Player with provided id doesn't exist\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"?playerId\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 99999,\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PatchTest-{{$timestamp}}\",\r\n        \"lastName\": \"PatchTest-{{$timestamp}}\",\r\n        \"birthDate\": \"1989-03-17\",\r\n        \"experienceYear\": \"1999\",\r\n        \"leadingHand\": \"LEFT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Invalid ID Format Exception",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"?playerId\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"invalidId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{playerId}},\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PatchTest-{{$timestamp}}\",\r\n        \"lastName\": \"PatchTest-{{$timestamp}}\",\r\n        \"birthDate\": \"1989-03-17\",\r\n        \"experienceYear\": \"1999\",\r\n        \"leadingHand\": \"LEFT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/invalidId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"invalidId"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Required Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"\r",
											"    let firstNameError = jsonData.errors.filter(error => error.status == \"PLAYER_FIRST_NAME_EMPTY\")[0];\r",
											"    let lastNameError = jsonData.errors.filter(error => error.status == \"PLAYER_LAST_NAME_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstNameError).to.be.not.null;\r",
											"    pm.expect(firstNameError.status).to.eql(\"PLAYER_FIRST_NAME_EMPTY\");\r",
											"    pm.expect(firstNameError.code).to.eql(\"400\");\r",
											"    pm.expect(firstNameError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstNameError.detail).to.eql(\"First Name is required field\");\r",
											"    pm.expect(firstNameError.source.pointer).to.eql(\"/attributes/firstName\");\r",
											"\r",
											"    pm.expect(lastNameError).to.be.not.null;\r",
											"    pm.expect(lastNameError.status).to.eql(\"PLAYER_LAST_NAME_EMPTY\");\r",
											"    pm.expect(lastNameError.code).to.eql(\"400\");\r",
											"    pm.expect(lastNameError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(lastNameError.detail).to.eql(\"Last Name is required field\");\r",
											"    pm.expect(lastNameError.source.pointer).to.eql(\"/attributes/lastName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{playerId}},\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"\",\r\n        \"birthDate\": \"1989-03-17\",\r\n        \"experienceYear\": \"1999\",\r\n        \"leadingHand\": \"LEFT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/{{playerId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"{{playerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Illegal Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"    \r",
											"    let experienceYearError = jsonData.errors.filter(error => error.status == \"EXPERIENCE_YEAR_ILLEGAL\")[0];\r",
											"    let birthDateError = jsonData.errors.filter(error => error.status == \"BIRTH_DATE_ILLEGAL\")[0];\r",
											"\r",
											"    pm.expect(birthDateError.status).to.eql(\"BIRTH_DATE_ILLEGAL\");\r",
											"    pm.expect(birthDateError.code).to.eql(\"400\");\r",
											"    pm.expect(birthDateError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(birthDateError.detail).to.eql(\"Birth Date can't be in future\");\r",
											"    pm.expect(birthDateError.source.pointer).to.eql(\"/attributes/birthDate\");\r",
											"\r",
											"    pm.expect(experienceYearError.status).to.eql(\"EXPERIENCE_YEAR_ILLEGAL\");\r",
											"    pm.expect(experienceYearError.code).to.eql(\"400\");\r",
											"    pm.expect(experienceYearError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(experienceYearError.detail).to.eql(\"Experience year can't be in future\");\r",
											"    pm.expect(experienceYearError.source.pointer).to.eql(\"/attributes/experienceYear\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{playerId}},\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest-{{$timestamp}}\",\r\n        \"birthDate\": \"2999-03-17\",\r\n        \"experienceYear\": \"3009\",\r\n        \"leadingHand\": \"LEFT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/{{playerId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"{{playerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player |  Invalid Body Format Exeption",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"/attributes/leadingHand\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"MIDDLE\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{playerId}},\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"MIDDLE\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/{{playerId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"{{playerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"404\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Player not found\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Player with provided id doesn't exist\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"?playerId\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/players/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Invalid Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"?playerId\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"invalidFormatId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/players/invalidFormatId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"invalidFormatId"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path | Duplication",
					"item": [
						{
							"name": "Authentication tiver69 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"firstName_duplication\", jsonData.data.attributes.firstName);\r",
											"postman.setEnvironmentVariable(\"lastName_duplication\", jsonData.data.attributes.lastName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Duplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"PLAYER_DUPLICATION\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Player with provided name already exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"{{firstName_duplication}}\",\r\n        \"lastName\": \"{{lastName_duplication}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"firstName\", jsonData.data.attributes.firstName);\r",
											"postman.setEnvironmentVariable(\"lastName\", jsonData.data.attributes.lastName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Player | Duplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"PLAYER_DUPLICATION\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Player with provided name already exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{playerId}},\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"{{firstName_duplication}}\",\r\n        \"lastName\": \"{{lastName_duplication}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"LEFT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players/{{playerId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players",
										"{{playerId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Manage Team",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_team-1\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"firstName\", jsonData.data.attributes.firstName);\r",
											"postman.setEnvironmentVariable(\"lastName\", jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_team-2\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"firstName\", jsonData.data.attributes.firstName);\r",
											"postman.setEnvironmentVariable(\"lastName\", jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_team-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_team-2}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/teams/{{teamId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams",
										"{{teamId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teams | No Warnings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Meta retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.totalPages).to.not.eql(0);\r",
											"    pm.expect(jsonData.meta.currentPage).to.eql(1);\r",
											"    pm.expect(jsonData.meta.warnings).to.be.undefined;\r",
											"});\r",
											"pm.test(\"First team's page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).to.eq(10);\r",
											"});\r",
											"pm.test(\"Included with players retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    var teamsAtPage = jsonData.data.length;\r",
											"    pm.expect(jsonData.included.length).to.eq(teamsAtPage * 2);\r",
											"\r",
											"    var playersIdsFromData = jsonData.data.flatMap(team => [team.relationships.playerOne, team.relationships.playerTwo]).map(player => player.id);\r",
											"    var playersIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playersIdsFromData).to.deep.equal(playersIdsFromIncluded);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var totalPages = jsonData.meta.totalPages;\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/participants/teams?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.prev).is.undefined;\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/participants/teams?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.next).to.eql(\"/participants/teams?page=2&pageSize=10\");\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/participants/teams?page=\" + totalPages + \"&pageSize=10\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/teams?page=1&pageSize=10",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teams | Lower Bound Warning",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Meta retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.totalPages).to.not.eql(0);\r",
											"    pm.expect(jsonData.meta.currentPage).to.eql(1);\r",
											"    \r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(1);\r",
											"    pm.expect(jsonData.meta.warnings[0].code).to.eq(\"PAGE_OUT_OF_RANGE\");\r",
											"    pm.expect(jsonData.meta.warnings[0].detail).to.eq(\"Page number is out of range, using default value for request\");\r",
											"    pm.expect(jsonData.meta.warnings[0].source.parameter).to.eq(\"0\");\r",
											"    pm.expect(jsonData.meta.warnings[0].source.pointer).to.eq(\"?page\");\r",
											"});\r",
											"pm.test(\"First team's page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).to.eq(10);\r",
											"});\r",
											"pm.test(\"Included with players retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    var teamsAtPage = jsonData.data.length;\r",
											"    pm.expect(jsonData.included.length).to.eq(teamsAtPage * 2);\r",
											"\r",
											"    var playersIdsFromData = jsonData.data.flatMap(team => [team.relationships.playerOne, team.relationships.playerTwo]).map(player => player.id);\r",
											"    var playersIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playersIdsFromData).to.deep.equal(playersIdsFromIncluded);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var totalPages = jsonData.meta.totalPages;\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/participants/teams?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.prev).is.undefined;\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/participants/teams?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.next).to.eql(\"/participants/teams?page=2&pageSize=10\");\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/participants/teams?page=\" + totalPages + \"&pageSize=10\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/teams?page=0&pageSize=10",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teams | Upper Bound Warning Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Meta retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.totalPages).to.eql(jsonData.data.currentPage);\r",
											"\r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(2);\r",
											"\r",
											"    let pageOutOfRangeWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PAGE_OUT_OF_RANGE\")[0];\r",
											"    pm.expect(pageOutOfRangeWarning.code).to.eq(\"PAGE_OUT_OF_RANGE\");\r",
											"    pm.expect(pageOutOfRangeWarning.detail).to.eq(\"Page number is out of range, using max allowed value for request\");\r",
											"    pm.expect(pageOutOfRangeWarning.source.parameter).to.eq(\"9999\");\r",
											"    pm.expect(pageOutOfRangeWarning.source.pointer).to.eq(\"?page\");\r",
											"\r",
											"    let pageSizeOutOfRangeWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PAGE_SIZE_OUT_OF_RANGE\")[0];\r",
											"    pm.expect(pageSizeOutOfRangeWarning.code).to.eq(\"PAGE_SIZE_OUT_OF_RANGE\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.detail).to.eq(\"Page size is out of range, using default value for request\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.source.parameter).to.eq(\"11\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.source.pointer).to.eq(\"?pageSize\");\r",
											"});\r",
											"pm.test(\"Last team's page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).not.to.eq(0);\r",
											"});\r",
											"pm.test(\"Included with players retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    var teamsAtPage = jsonData.data.length;\r",
											"    pm.expect(jsonData.included.length).to.eq(teamsAtPage * 2);\r",
											"\r",
											"    var playersIdsFromData = jsonData.data.flatMap(team => [team.relationships.playerOne, team.relationships.playerTwo]).map(player => player.id);\r",
											"    var playersIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playersIdsFromData).to.deep.equal(playersIdsFromIncluded);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var currentPage = jsonData.meta.currentPage;\r",
											"\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/participants/teams?page=1&pageSize=5\");\r",
											"    pm.expect(jsonData.links.prev).to.eql(\"/participants/teams?page=\" + (currentPage - 1) + \"&pageSize=5\");\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/participants/teams?page=\" + currentPage + \"&pageSize=5\");\r",
											"    pm.expect(jsonData.links.next).is.undefined;\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/participants/teams?page=\" + currentPage + \"&pageSize=5\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/teams?page=9999&pageSize=11",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "11"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team | Required Attributes | Full Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"PLAYER_ONE_EMPTY\")[0];\r",
											"    let secondPlayerError = jsonData.errors.filter(error => error.status == \"PLAYER_TWO_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"PLAYER_ONE_EMPTY\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"First player must be provided\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/relationships/players[0]\");\r",
											"\r",
											"    pm.expect(secondPlayerError).to.be.not.null;\r",
											"    pm.expect(secondPlayerError.status).to.eql(\"PLAYER_TWO_EMPTY\");\r",
											"    pm.expect(secondPlayerError.code).to.eql(\"400\");\r",
											"    pm.expect(secondPlayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(secondPlayerError.detail).to.eql(\"Second player must be provided\");\r",
											"    pm.expect(secondPlayerError.source.pointer).to.eql(\"/relationships/players[1]\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team | Required Attributes | Player IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"PLAYER_ONE_EMPTY\")[0];\r",
											"    let secondPlayerError = jsonData.errors.filter(error => error.status == \"PLAYER_TWO_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"PLAYER_ONE_EMPTY\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"First player must be provided\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/relationships/players[0]\");\r",
											"\r",
											"    pm.expect(secondPlayerError).to.be.not.null;\r",
											"    pm.expect(secondPlayerError.status).to.eql(\"PLAYER_TWO_EMPTY\");\r",
											"    pm.expect(secondPlayerError.code).to.eql(\"400\");\r",
											"    pm.expect(secondPlayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(secondPlayerError.detail).to.eql(\"Second player must be provided\");\r",
											"    pm.expect(secondPlayerError.source.pointer).to.eql(\"/relationships/players[1]\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team | Illegal Values | Player IDs Equal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"PLAYER_DUPLICATION\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Team must have two different players\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(pm.environment.get(\"playerId_team-1\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_team-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_team-1}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team |  Invalid Format | First Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"invalidFormatId\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"/relationships/players[0]/id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": \"invalidFormatId\",\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_team-2}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team |  Invalid Format | Second Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"invalidFormatId\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"/relationships/players[1]/id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_team-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": \"invalidFormatId\",\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team | Player Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.source.parameter == \"99998\")[0];\r",
											"    let secondPlayerError = jsonData.errors.filter(error => error.source.parameter == \"99999\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Player not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Player with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/relationships/players[0]/id\");\r",
											"\r",
											"    pm.expect(secondPlayerError).to.be.not.null;\r",
											"    pm.expect(secondPlayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(secondPlayerError.code).to.eql(\"404\");\r",
											"    pm.expect(secondPlayerError.title).to.eql(\"Player not found\");\r",
											"    pm.expect(secondPlayerError.detail).to.eql(\"Player with provided id doesn't exist\");\r",
											"    pm.expect(secondPlayerError.source.pointer).to.eql(\"/relationships/players[1]/id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": 99998,\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": 99999,\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team | Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"404\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Team not found\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Team with provided id doesn't exist\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"?teamId\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/teams/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Team |  Invalid Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"BAD_REQUEST\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"400\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Something is wrong with input data\");\r",
											"    pm.expect(jsonData.errors[0].source.pointer).to.eql(\"?teamId\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"invalidFormatId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/participants/teams/invalidFormatId",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams",
										"invalidFormatId"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Manage Tournament",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Planned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"PLANNED\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.be.undefined;\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTestPlanned-{{$timestamp}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"SINGLE\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | In Progress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTestProgress-{{$timestamp}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"SINGLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Without Contests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournaments | No Warnings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Meta retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.totalPages).to.not.eql(0);\r",
											"    pm.expect(jsonData.meta.currentPage).to.eql(1);\r",
											"    pm.expect(jsonData.meta.warnings).to.be.undefined;\r",
											"});\r",
											"pm.test(\"First tournaments's page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).to.eq(10);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var totalPages = jsonData.meta.totalPages;\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/tournaments?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.prev).is.undefined;\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/tournaments?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.next).to.eql(\"/tournaments?page=2&pageSize=10\");\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/tournaments?page=\" + totalPages + \"&pageSize=10\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments?page=1&pageSize=10",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournaments | Lower Bound Warning",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Meta retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.totalPages).to.not.eql(0);\r",
											"    pm.expect(jsonData.meta.currentPage).to.eql(1);\r",
											"    \r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(1);\r",
											"    pm.expect(jsonData.meta.warnings[0].code).to.eq(\"PAGE_OUT_OF_RANGE\");\r",
											"    pm.expect(jsonData.meta.warnings[0].detail).to.eq(\"Page number is out of range, using default value for request\");\r",
											"    pm.expect(jsonData.meta.warnings[0].source.parameter).to.eq(\"0\");\r",
											"    pm.expect(jsonData.meta.warnings[0].source.pointer).to.eq(\"?page\");\r",
											"});\r",
											"pm.test(\"First tournaments's page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).to.eq(10);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var totalPages = jsonData.meta.totalPages;\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/tournaments?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.prev).is.undefined;\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/tournaments?page=1&pageSize=10\");\r",
											"    pm.expect(jsonData.links.next).to.eql(\"/tournaments?page=2&pageSize=10\");\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/tournaments?page=\" + totalPages + \"&pageSize=10\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments?page=0&pageSize=10",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournaments | Lower Bound Warning Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Meta retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.totalPages).to.eql(jsonData.data.currentPage);\r",
											"\r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(2);\r",
											"\r",
											"    let pageOutOfRangeWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PAGE_OUT_OF_RANGE\")[0];\r",
											"    pm.expect(pageOutOfRangeWarning.code).to.eq(\"PAGE_OUT_OF_RANGE\");\r",
											"    pm.expect(pageOutOfRangeWarning.detail).to.eq(\"Page number is out of range, using max allowed value for request\");\r",
											"    pm.expect(pageOutOfRangeWarning.source.parameter).to.eq(\"9999\");\r",
											"    pm.expect(pageOutOfRangeWarning.source.pointer).to.eq(\"?page\");\r",
											"\r",
											"    let pageSizeOutOfRangeWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PAGE_SIZE_OUT_OF_RANGE\")[0];\r",
											"    pm.expect(pageSizeOutOfRangeWarning.code).to.eq(\"PAGE_SIZE_OUT_OF_RANGE\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.detail).to.eq(\"Page size is out of range, using default value for request\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.source.parameter).to.eq(\"11\");\r",
											"    pm.expect(pageSizeOutOfRangeWarning.source.pointer).to.eq(\"?pageSize\");\r",
											"});\r",
											"pm.test(\"Last tournament's page retrieved correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.length).not.to.eq(0);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var currentPage = jsonData.meta.currentPage;\r",
											"\r",
											"    pm.expect(jsonData.links.first).to.eql(\"/tournaments?page=1&pageSize=5\");\r",
											"    pm.expect(jsonData.links.prev).to.eql(\"/tournaments?page=\" + (currentPage - 1) + \"&pageSize=5\");\r",
											"    pm.expect(jsonData.links.self).to.eql(\"/tournaments?page=\" + currentPage + \"&pageSize=5\");\r",
											"    pm.expect(jsonData.links.next).is.undefined;\r",
											"    pm.expect(jsonData.links.last).to.eql(\"/tournaments?page=\" + currentPage + \"&pageSize=5\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments?page=9999&pageSize=11",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									],
									"query": [
										{
											"key": "page",
											"value": "9999"
										},
										{
											"key": "pageSize",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament updated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2019-12-31\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PatchTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ELIMINATION\",\r\n        \"participantType\": \"DOUBLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2019-12-31\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body is empty\", () => {\r",
											"    pm.expect(responseBody).to.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Path | Single Round | Warnings",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-1\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-1\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-2\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-2\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-3\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-3\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest3-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest3-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-4\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-4\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest4-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest4-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"SINGLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Four Players",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players name\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-1\")));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var thirdPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-3\")));\r",
											"    pm.expect(thirdPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var fourthPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-4\")));\r",
											"    pm.expect(fourthPlayerContests.length).to.eq(3);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.contests[0].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[0].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-1\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-1\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-2\", jsonData.data.relationships.contests[1].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[1].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-3\", jsonData.data.relationships.contests[2].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[2].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-4\", jsonData.data.relationships.contests[3].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[3].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-4\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-4\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-5\", jsonData.data.relationships.contests[4].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[4].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-5\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-5\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-6\", jsonData.data.relationships.contests[5].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[5].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-6\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-6\", contestInfo.attributes.participantTwo);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-3}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-4}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Players | Warning",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Meta contain all warnings\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(4);\r",
											"\r",
											"    let notFoundWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PLAYER_NOT_FOUND\")[0];\r",
											"    let unsupportedTypeWarnings = jsonData.meta.warnings.filter(warning => warning.code == \"UNSUPPORTED_RESOURCE_TYPE\");\r",
											"    let duplicationarning = jsonData.meta.warnings.filter(warning => warning.code == \"PARTICIPANT_DUPLICATION\")[0];\r",
											"\r",
											"    pm.expect(notFoundWarning).to.be.not.null;\r",
											"    pm.expect(notFoundWarning.code).to.eql(\"PLAYER_NOT_FOUND\");\r",
											"    pm.expect(notFoundWarning.detail).to.eql(\"Player ignored from request as he/she doesn't exist in system\");\r",
											"    pm.expect(notFoundWarning.source.pointer).to.eql(\"/relationships/participants[0]\");\r",
											"    pm.expect(notFoundWarning.source.parameter).to.eql(\"99999\");\r",
											"\r",
											"    pm.expect(duplicationarning).to.be.not.null;\r",
											"    pm.expect(duplicationarning.code).to.eql(\"PARTICIPANT_DUPLICATION\");\r",
											"    pm.expect(duplicationarning.detail).to.eql(\"Participant ignored from request due to duplication\");\r",
											"    pm.expect(duplicationarning.source.pointer).to.eql(\"/relationships/participants[1]\");\r",
											"    pm.expect(duplicationarning.source.parameter).to.eql(pm.environment.get(\"playerId_tournament-2\"));\r",
											"\r",
											"    pm.expect(unsupportedTypeWarnings).to.be.an(\"array\");\r",
											"    pm.expect(unsupportedTypeWarnings.length).to.eq(2);\r",
											"\r",
											"    pm.expect(unsupportedTypeWarnings.filter(warning => warning.detail === \"Resource Type is not supported for current request and is ignored\").length).to.eql(2);\r",
											"    pm.expect(unsupportedTypeWarnings.filter(warning => warning.source.parameter === \"team\").length).to.eql(2);\r",
											"    pm.expect(unsupportedTypeWarnings.map(warning => warning.source.pointer)).includes(\"/relationships/participants[3]/type\", \"/relationships/participants[2]/type\");\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players name\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-1\")));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var thirdPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-3\")));\r",
											"    pm.expect(thirdPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var fourthPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-4\")));\r",
											"    pm.expect(fourthPlayerContests.length).to.eq(3);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": 99999,\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"team\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Contest | Empty Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with zero scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-1\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-1\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1sth Contest | Tech Defeat Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with tech defeat score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(true);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-1\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-1\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": true,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 4,\r\n                \"participantTwo\": 4\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Contest | Complete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-3\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-3\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-3\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-3}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-3}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-3}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Contest | Complete Score With Tie Break",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with entered scores and tie break\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-4\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(3);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-4\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-4\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-4}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 7\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 3\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-4}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-4}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "5th Contest | InComplete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with entered scores without winner\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-5\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-5\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-5\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-5}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 4,\r\n                \"participantTwo\": 4\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-5}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-5}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Complieted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(50);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players names\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-1\")));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var thirdPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-3\")));\r",
											"    pm.expect(thirdPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var fourthPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-4\")));\r",
											"    pm.expect(fourthPlayerContests.length).to.eq(3);\r",
											"});\r",
											"pm.test(\"Included contains contests with correct scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    var firstContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-1\")))[0];\r",
											"    pm.expect(firstContest.attributes.mainScore).to.eq(\"4:4 0:0 0:0\");\r",
											"    pm.expect(firstContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantOne).to.eq(true);\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var thirdContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-3\")))[0];\r",
											"    pm.expect(thirdContest.attributes.mainScore).to.eq(\"1:6 6:1 1:6\");\r",
											"    pm.expect(thirdContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var fourthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-4\")))[0];\r",
											"    pm.expect(fourthContest.attributes.mainScore).to.eq(\"5:7 6:1 0:0\");\r",
											"    pm.expect(fourthContest.attributes.tieBreak).to.eq(\"6:3\");\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var fifthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-5\")))[0];\r",
											"    pm.expect(fifthContest.attributes.mainScore).to.eq(\"4:4 1:6 0:0\");\r",
											"    pm.expect(fifthContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var remainingContests = jsonData.included.filter(contest => \"0:0 0:0 0:0\" === contest.attributes.mainScore && \"0:0\" === contest.attributes.tieBreak);    \r",
											"    pm.expect(remainingContests).to.be.an(\"array\");\r",
											"    pm.expect(remainingContests.length).to.eq(2);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.contests[0].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[0].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-1\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-1\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-2\", jsonData.data.relationships.contests[1].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[1].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-3\", jsonData.data.relationships.contests[2].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[2].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-4\", jsonData.data.relationships.contests[3].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[3].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-4\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-4\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-5\", jsonData.data.relationships.contests[4].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[4].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-5\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-5\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-6\", jsonData.data.relationships.contests[5].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[5].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-6\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-6\", contestInfo.attributes.participantTwo);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5rd Contest | Complete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with entered scores with winner\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-5\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-5\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-5\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-5}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 4\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 7,\r\n                \"participantTwo\": 5\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-5}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-5}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw First Participant With Tech Defeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(83);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players name and first player tech defeat status\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest =>\r",
											"        (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-1\") && (contest.attributes.techDefeat.participantOne === true))\r",
											"        ||\r",
											"        (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-1\") && (contest.attributes.techDefeat.participantTwo === true)));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var thirdPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-3\")));\r",
											"    pm.expect(thirdPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var fourthPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-4\")));\r",
											"    pm.expect(fourthPlayerContests.length).to.eq(3);\r",
											"});\r",
											"pm.test(\"Included contains contests with correct scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    var firstContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-1\")))[0];\r",
											"    pm.expect(firstContest.attributes.mainScore).to.eq(\"4:4 0:0 0:0\");\r",
											"    pm.expect(firstContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantOne).to.eq(true);\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var secondContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-2\")))[0];\r",
											"    pm.expect(secondContest.attributes.mainScore).to.eq(\"0:0 0:0 0:0\");\r",
											"    pm.expect(secondContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(secondContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(secondContest.attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var thirdContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-3\")))[0];\r",
											"    pm.expect(thirdContest.attributes.mainScore).to.eq(\"1:6 6:1 1:6\");\r",
											"    pm.expect(thirdContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var fourthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-4\")))[0];\r",
											"    pm.expect(fourthContest.attributes.mainScore).to.eq(\"5:7 6:1 0:0\");\r",
											"    pm.expect(fourthContest.attributes.tieBreak).to.eq(\"6:3\");\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var fifthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-5\")))[0];\r",
											"    pm.expect(fifthContest.attributes.mainScore).to.eq(\"6:4 1:6 7:5\");\r",
											"    pm.expect(fifthContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var sixthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-6\")))[0];\r",
											"    pm.expect(sixthContest.attributes.mainScore).to.eq(\"0:0 0:0 0:0\");\r",
											"    pm.expect(sixthContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(sixthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(sixthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "{{contentType}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/withdraw/{{playerId_tournament-1}}?techDefeat=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"withdraw",
										"{{playerId_tournament-1}}"
									],
									"query": [
										{
											"key": "techDefeat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Third Participant Without Tech Defeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(3);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(100);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(3);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships ithout removed ones\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players names without second and first player tech defeat status\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest =>\r",
											"        (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-1\") && (contest.attributes.techDefeat.participantOne === true))\r",
											"        ||\r",
											"        (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-1\") && (contest.attributes.techDefeat.participantTwo === true)));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(2);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(2);\r",
											"\r",
											"    var thirdPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-3\")));\r",
											"    pm.expect(thirdPlayerContests.length).to.eq(0);\r",
											"\r",
											"    var fourthPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-4\")));\r",
											"    pm.expect(fourthPlayerContests.length).to.eq(2);\r",
											"});\r",
											"pm.test(\"Included contains contests with correct scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    var firstContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-1\")))[0];\r",
											"    pm.expect(firstContest.attributes.mainScore).to.eq(\"4:4 0:0 0:0\");\r",
											"    pm.expect(firstContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantOne).to.eq(true);\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var fourthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-4\")))[0];\r",
											"    pm.expect(fourthContest.attributes.mainScore).to.eq(\"5:7 6:1 0:0\");\r",
											"    pm.expect(fourthContest.attributes.tieBreak).to.eq(\"6:3\");\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var fifthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-5\")))[0];\r",
											"    pm.expect(fifthContest.attributes.mainScore).to.eq(\"6:4 1:6 7:5\");\r",
											"    pm.expect(fifthContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    pm.expect(jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-2\"))).length).to.be.eq(0);\r",
											"    pm.expect(jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-3\"))).length).to.be.eq(0);\r",
											"    pm.expect(jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-6\"))).length).to.be.eq(0);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "{{contentType}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/withdraw/{{playerId_tournament-3}}?techDefeat=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"withdraw",
										"{{playerId_tournament-3}}"
									],
									"query": [
										{
											"key": "techDefeat",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Path | Double Round | Warnings",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-1\", jsonData.data.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-2\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-3\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest3-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest3-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-4\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest4-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest4-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "5th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-5\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest5-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest5-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "6th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-6\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest6-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest6-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "7th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-7\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest7-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest7-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "8th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-8\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest8-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest8-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-1\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-1\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-2\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-2\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-3}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-4}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-3\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-3\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-5}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-6}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-4\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-4\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-7}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-8}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"DOUBLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Four Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct team participant names\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-1\")));\r",
											"    pm.expect(firstTeamContests.length).to.eq(3);\r",
											"\r",
											"    var secondTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-2\")));\r",
											"    pm.expect(secondTeamContests.length).to.eq(3);\r",
											"\r",
											"    var thirdTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-3\")));\r",
											"    pm.expect(thirdTeamContests.length).to.eq(3);\r",
											"\r",
											"    var fourthTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-4\")));\r",
											"    pm.expect(fourthTeamContests.length).to.eq(3);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.contests[0].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[0].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-1\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-1\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-2\", jsonData.data.relationships.contests[1].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[1].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-3\", jsonData.data.relationships.contests[2].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[2].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-4\", jsonData.data.relationships.contests[3].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[3].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-4\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-4\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-5\", jsonData.data.relationships.contests[4].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[4].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-5\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-5\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-6\", jsonData.data.relationships.contests[5].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[5].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-6\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-6\", contestInfo.attributes.participantTwo);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{teamId_tournament-1}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-2}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-3}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-4}},\r\n                \"type\": \"team\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Teams | Warning",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Meta contain all warnings\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.meta.warnings).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.meta.warnings.length).to.eq(4);\r",
											"\r",
											"    let notFoundWarning = jsonData.meta.warnings.filter(warning => warning.code == \"TEAM_NOT_FOUND\")[0];\r",
											"    let unsupportedTypeWarnings = jsonData.meta.warnings.filter(warning => warning.code == \"UNSUPPORTED_RESOURCE_TYPE\");\r",
											"    let duplicationWarning = jsonData.meta.warnings.filter(warning => warning.code == \"PARTICIPANT_DUPLICATION\")[0];\r",
											"\r",
											"    pm.expect(notFoundWarning).to.be.not.null;\r",
											"    pm.expect(notFoundWarning.code).to.eql(\"TEAM_NOT_FOUND\");\r",
											"    pm.expect(notFoundWarning.detail).to.eql(\"Team ignored from request as it doesn't exist in system\");\r",
											"    pm.expect(notFoundWarning.source.pointer).to.eql(\"/relationships/participants[0]\");\r",
											"    pm.expect(notFoundWarning.source.parameter).to.eql(\"99999\");\r",
											"\r",
											"    pm.expect(duplicationWarning).to.be.not.null;\r",
											"    pm.expect(duplicationWarning.code).to.eql(\"PARTICIPANT_DUPLICATION\");\r",
											"    pm.expect(duplicationWarning.detail).to.eql(\"Participant ignored from request due to duplication\");\r",
											"    pm.expect(duplicationWarning.source.pointer).to.eql(\"/relationships/participants[1]\");\r",
											"    pm.expect(duplicationWarning.source.parameter).to.eql(pm.environment.get(\"teamId_tournament-2\"));\r",
											"\r",
											"    pm.expect(unsupportedTypeWarnings).to.be.an(\"array\");\r",
											"    pm.expect(unsupportedTypeWarnings.length).to.eq(2);\r",
											"\r",
											"    pm.expect(unsupportedTypeWarnings.filter(warning => warning.detail === \"Resource Type is not supported for current request and is ignored\").length).to.eql(2);\r",
											"    pm.expect(unsupportedTypeWarnings.filter(warning => warning.source.parameter === \"player\").length).to.eql(2);\r",
											"    pm.expect(unsupportedTypeWarnings.map(warning => warning.source.pointer)).includes(\"/relationships/participants[3]/type\", \"/relationships/participants[2]/type\");\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct team participant names\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-1\")));\r",
											"    pm.expect(firstTeamContests.length).to.eq(3);\r",
											"\r",
											"    var secondTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-2\")));\r",
											"    pm.expect(secondTeamContests.length).to.eq(3);\r",
											"\r",
											"    var thirdTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-3\")));\r",
											"    pm.expect(thirdTeamContests.length).to.eq(3);\r",
											"\r",
											"    var fourthTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-4\")));\r",
											"    pm.expect(fourthTeamContests.length).to.eq(3);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": 99999,\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-2}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-3}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-4}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Contest | Empty Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with zero scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-2\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Third Participant With Tech Defeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(50);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct team names and third team tech defeat status\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-1\")));\r",
											"    pm.expect(firstTeamContests.length).to.eq(3);\r",
											"\r",
											"    var secondTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-2\")));\r",
											"    pm.expect(secondTeamContests.length).to.eq(3);\r",
											"\r",
											"    var thirdTeamContests = jsonData.included.filter(contest =>\r",
											"        ((contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-3\")) && (contest.attributes.techDefeat.participantOne === true && contest.attributes.techDefeat.participantTwo === false))\r",
											"        ||\r",
											"        ((contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-3\")) && (contest.attributes.techDefeat.participantOne === false && contest.attributes.techDefeat.participantTwo === true)));\r",
											"    pm.expect(thirdTeamContests.length).to.eq(3);\r",
											"\r",
											"    var fourthTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-4\")));\r",
											"    pm.expect(fourthTeamContests.length).to.eq(3);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "{{contentType}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/withdraw/{{teamId_tournament-3}}?techDefeat=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"withdraw",
										"{{teamId_tournament-3}}"
									],
									"query": [
										{
											"key": "techDefeat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Contest | Tech Defeat Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with tech defeat score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-2\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(true);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(true);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-2}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": true,\r\n            \"participantTwo\": true\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Contest | Complete Score With Tie Break",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with entered scores and tie break\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-4\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(3);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"team\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-4}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 7\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 3\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-4}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-4}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "5th Contest | InComplete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with entered scores without winner\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-5\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-5}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 4,\r\n                \"participantTwo\": 4\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-5}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-5}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Complieted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(66);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players names\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-1\")));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var thirdPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-3\")));\r",
											"    pm.expect(thirdPlayerContests.length).to.eq(3);\r",
											"\r",
											"    var fourthPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-4\")));\r",
											"    pm.expect(fourthPlayerContests.length).to.eq(3);\r",
											"});\r",
											"pm.test(\"Included contains contests with correct scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"    var firstContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-1\")))[0];\r",
											"    pm.expect(firstContest.attributes.mainScore).to.eq(\"0:0 0:0 0:0\");\r",
											"    pm.expect(firstContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(firstContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var thirdContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-2\")))[0];\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantOne).to.eq(true);\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var thirdContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-3\")))[0];\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantOne).to.eq(true);\r",
											"    pm.expect(thirdContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var fourthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-4\")))[0];\r",
											"    pm.expect(fourthContest.attributes.mainScore).to.eq(\"5:7 6:1 0:0\");\r",
											"    pm.expect(fourthContest.attributes.tieBreak).to.eq(\"6:3\");\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fourthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var fifthContest = jsonData.included.filter(contest => contest.id === parseInt(pm.environment.get(\"contestId-5\")))[0];\r",
											"    pm.expect(fifthContest.attributes.mainScore).to.eq(\"4:4 1:6 0:0\");\r",
											"    pm.expect(fifthContest.attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(fifthContest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var remainingContests = jsonData.included.filter(contest => \"0:0 0:0 0:0\" === contest.attributes.mainScore && \"0:0\" === contest.attributes.tieBreak);    \r",
											"    pm.expect(remainingContests).to.be.an(\"array\");\r",
											"    pm.expect(remainingContests.length).to.eq(4);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.contests[0].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[0].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-1\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-1\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-2\", jsonData.data.relationships.contests[1].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[1].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-3\", jsonData.data.relationships.contests[2].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[2].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-4\", jsonData.data.relationships.contests[3].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[3].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-4\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-4\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-5\", jsonData.data.relationships.contests[4].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[4].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-5\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-5\", contestInfo.attributes.participantTwo);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-6\", jsonData.data.relationships.contests[5].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[5].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-6\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-6\", contestInfo.attributes.participantTwo);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Fourth Participant Without Tech Defeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(3);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(66);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(3);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct team participant names\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var firstTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-1\")));\r",
											"    pm.expect(firstTeamContests.length).to.eq(2);\r",
											"\r",
											"    var secondTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-2\")));\r",
											"    pm.expect(secondTeamContests.length).to.eq(2);\r",
											"\r",
											"    var thirdTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-3\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-3\")));\r",
											"    pm.expect(thirdTeamContests.length).to.eq(2);\r",
											"\r",
											"    var fourthTeamContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"teamName_tournament-4\")) || (contest.attributes.participantTwo === pm.environment.get(\"teamName_tournament-4\")));\r",
											"    pm.expect(fourthTeamContests.length).to.eq(0);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "{{contentType}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/withdraw/{{teamId_tournament-4}}?techDefeat=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"withdraw",
										"{{teamId_tournament-4}}"
									],
									"query": [
										{
											"key": "techDefeat",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Path | Single Elimination",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-1\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-1\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-2\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-2\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-3\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-3\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest3-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest3-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-4\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-4\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest4-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest4-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ELIMINATION\",\r\n        \"participantType\": \"SINGLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Four Players",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-4\"));\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"    jsonData.included.filter(contest => contest.type === \"contestInfo\").forEach(contest => {\r",
											"        pm.expect(contest.attributes.techDefeat).not.to.be.undefined;\r",
											"        pm.expect(contest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"        pm.expect(contest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-3}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-4}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest | Empty Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with zero scores and no participants\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included are empty as no participants yet determined\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Parent Contest | Complete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-2\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-2\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-2\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-2}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Complieted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(33);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantTwo).to.be.undefined;\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.mainScore).to.be.undefined;\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.tieBreak).to.be.undefined;\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.techDefeat).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-4\"));\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"    jsonData.included.filter(contest => contest.type === \"contestInfo\").forEach(contest => {\r",
											"        pm.expect(contest.attributes.techDefeat).not.to.be.undefined;\r",
											"        pm.expect(contest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"        pm.expect(contest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Parent Contest | Incomplete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with entered scores without winner\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-3\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-3\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-3\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-3}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 5\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-3}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-3}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "2st Parent Contest | Complete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-3\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-3\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-3\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-3}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 7,\r\n                \"participantTwo\": 5\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 7\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-3}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-3}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Complieted | With Finaly Participants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(66);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.mainScore).to.eql(\"0:0 0:0 0:0\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.tieBreak).to.eql(\"0:0\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.techDefeat).not.to.be.undefined;\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"    pm.expect(firstParentContest[0].attributes.mainScore).to.eq(\"1:6 6:1 1:6\");\r",
											"    pm.expect(firstParentContest[0].attributes.tieBreak).to.eq(\"5:6\");\r",
											"    pm.expect(firstParentContest[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(firstParentContest[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-4\"));\r",
											"    pm.expect(secondParentContest[0].attributes.mainScore).to.eq(\"7:5 6:1 5:7\");\r",
											"    pm.expect(secondParentContest[0].attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(secondParentContest[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(secondParentContest[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest | Tech Defeat Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with tech defeat score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(true);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-2\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-3\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": true,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 4,\r\n                \"participantTwo\": 4\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Complieted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(100);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.mainScore).to.eql(\"4:4 0:0 0:0\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.tieBreak).to.eql(\"0:0\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.techDefeat.participantOne).to.eq(true);\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"    pm.expect(firstParentContest[0].attributes.mainScore).to.eq(\"1:6 6:1 1:6\");\r",
											"    pm.expect(firstParentContest[0].attributes.tieBreak).to.eq(\"5:6\");\r",
											"    pm.expect(firstParentContest[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(firstParentContest[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-4\"));\r",
											"    pm.expect(secondParentContest[0].attributes.mainScore).to.eq(\"7:5 6:1 5:7\");\r",
											"    pm.expect(secondParentContest[0].attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(secondParentContest[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(secondParentContest[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Path | Double Elimination",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-1\", jsonData.data.id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-2\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-3\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest3-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest3-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-4\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest4-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest4-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "5th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-5\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest5-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest5-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "6th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-6\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest6-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest6-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "7th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-7\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest7-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest7-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "8th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-8\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest8-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest8-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-1\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-1\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-2\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-2\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-3}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-4}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-3\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-3\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-5}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-6}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Team",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Team created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.playerOne.type).to.eql(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.playerTwo.type).to.eql(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/teams/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contain all players\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"    let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"    \r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == firstPlayerId).length).to.eq(1);\r",
											"    pm.expect(jsonData.included.filter(player => player.id == secondPlayerId).length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"teamId_tournament-4\", jsonData.data.id);\r",
											"\r",
											"let firstPlayerId = jsonData.data.relationships.playerOne.id;\r",
											"let secondPlayerId = jsonData.data.relationships.playerTwo.id;\r",
											"let firstPlayer = jsonData.included.filter(player => player.id == firstPlayerId)[0]\r",
											"let secondPlayer = jsonData.included.filter(player => player.id == secondPlayerId)[0]\r",
											"postman.setEnvironmentVariable(\"teamName_tournament-4\", firstPlayer.attributes.firstName + \" \" + firstPlayer.attributes.lastName + \" - \" + secondPlayer.attributes.firstName + \" \" + secondPlayer.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"team\",\r\n    \"relationships\": {\r\n        \"players\": [\r\n            {\r\n                \"id\": {{playerId_tournament-7}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-8}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/teams",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"teams"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ELIMINATION\",\r\n        \"participantType\": \"DOUBLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Four Teams",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-2\"));\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-4\"));\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"    jsonData.included.filter(contest => contest.type === \"contestInfo\").forEach(contest => {\r",
											"        pm.expect(contest.attributes.techDefeat).not.to.be.undefined;\r",
											"        pm.expect(contest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"        pm.expect(contest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{teamId_tournament-1}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-2}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-3}},\r\n                \"type\": \"team\"\r\n            },\r\n            {\r\n                \"id\": {{teamId_tournament-4}},\r\n                \"type\": \"team\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Parent Contest | Empty Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with zero scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-2\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct participants with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Complieted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-2\"));\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-4\"));\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"    jsonData.included.filter(contest => contest.type === \"contestInfo\").forEach(contest => {\r",
											"        pm.expect(contest.attributes.techDefeat).not.to.be.undefined;\r",
											"        pm.expect(contest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"        pm.expect(contest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Contest | Tech Defeat Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with tech defeat score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-2\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(true);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"team\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-2}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": true\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "2st Parent Contest | Complete Score Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-3\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"team\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-3}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 7,\r\n                \"participantTwo\": 5\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 7\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-3}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-3}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest | Empty Results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with zero scores\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(0);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantTwo.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct participants with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest | Complete Score",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with tech defeat score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(4);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(3);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(7);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"team\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantOne.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"team\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(6);\r",
											"\r",
											"    var teamOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var teamTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var teamIdsFromIncluded = jsonData.included.filter(team => team.type === \"team\").map(team => team.id);\r",
											"    pm.expect(teamIdsFromIncluded).to.include(teamOneId, teamTwoId);\r",
											"\r",
											"    var playerIds = jsonData.included.filter(team => team.type === \"team\").flatMap(team => [team.relationships.playerOne.id, team.relationships.playerTwo.id]);\r",
											"    pm.expect(jsonData.included.filter(player => player.type === \"player\").map(player => player.id)).to.be.eql(playerIds)\r",
											"\r",
											"    jsonData.included.forEach(participant => {\r",
											"        if (participant.type === \"team\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/teams/\" + participant.id)\r",
											"        if (participant.type === \"player\")\r",
											"            pm.expect(participant.links.self).to.eq(\"/participants/players/\" + participant.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 4\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 3,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 7,\r\n                \"participantTwo\": 5\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 0\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Complieted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"DOUBLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(100);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-1\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-3\"));\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.mainScore).to.eql(\"6:4 3:6 7:5\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.tieBreak).to.eql(\"6:0\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(finalContestFromIncluded[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-2\"));\r",
											"    pm.expect(firstParentContest[0].attributes.mainScore).to.eq(\"0:0 0:0 0:0\");\r",
											"    pm.expect(firstParentContest[0].attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(firstParentContest[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(firstParentContest[0].attributes.techDefeat.participantTwo).to.eq(true);\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"teamName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"teamName_tournament-4\"));\r",
											"    pm.expect(secondParentContest[0].attributes.mainScore).to.eq(\"7:5 6:1 5:7\");\r",
											"    pm.expect(secondParentContest[0].attributes.tieBreak).to.eq(\"0:0\");\r",
											"    pm.expect(secondParentContest[0].attributes.techDefeat.participantOne).to.eq(false);\r",
											"    pm.expect(secondParentContest[0].attributes.techDefeat.participantTwo).to.eq(false);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Required Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(3);\r",
											"\r",
											"    let tournamentTypeError = jsonData.errors.filter(error => error.status == \"TOURNAMENT_TYPE_EMPTY\")[0];\r",
											"    let participantTypeError = jsonData.errors.filter(error => error.status == \"PARTICIPANT_TYPE_EMPTY\")[0];\r",
											"    let tournamentNameError = jsonData.errors.filter(error => error.status == \"TOURNAMENT_NAME_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(tournamentTypeError).to.be.not.null;\r",
											"    pm.expect(tournamentTypeError.status).to.eql(\"TOURNAMENT_TYPE_EMPTY\");\r",
											"    pm.expect(tournamentTypeError.code).to.eql(\"400\");\r",
											"    pm.expect(tournamentTypeError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(tournamentTypeError.detail).to.eql(\"Tournament Type is required field\");\r",
											"    pm.expect(tournamentTypeError.source.pointer).to.eql(\"/attributes/tournamentType\");\r",
											"\r",
											"    pm.expect(participantTypeError).to.be.not.null;\r",
											"    pm.expect(participantTypeError.status).to.eql(\"PARTICIPANT_TYPE_EMPTY\");\r",
											"    pm.expect(participantTypeError.code).to.eql(\"400\");\r",
											"    pm.expect(participantTypeError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(participantTypeError.detail).to.eql(\"Participant Type is required field\");\r",
											"    pm.expect(participantTypeError.source.pointer).to.eql(\"/attributes/participantType\");\r",
											"\r",
											"    pm.expect(tournamentNameError).to.be.not.null;\r",
											"    pm.expect(tournamentNameError.status).to.eql(\"TOURNAMENT_NAME_EMPTY\");\r",
											"    pm.expect(tournamentNameError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(participantTypeError.code).to.eql(\"400\");\r",
											"    pm.expect(tournamentNameError.detail).to.eql(\"Tournament Name is required field\");\r",
											"    pm.expect(tournamentNameError.source.pointer).to.eql(\"/attributes/name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path | Name Duplication",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"PLANNED\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.be.undefined;\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName_duplication\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"SINGLE\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Name Duplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let tournamentNameError = jsonData.errors.filter(error => error.status == \"TOURNAMENT_NAME_DUPLICATE\")[0];\r",
											"\r",
											"    pm.expect(tournamentNameError).to.be.not.null;\r",
											"    pm.expect(tournamentNameError.status).to.eql(\"TOURNAMENT_NAME_DUPLICATE\");\r",
											"    pm.expect(tournamentNameError.code).to.eql(\"400\");\r",
											"    pm.expect(tournamentNameError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(tournamentNameError.detail).to.eql(\"Tournament with such name already exists\");\r",
											"    pm.expect(tournamentNameError.source.parameter).to.eql(pm.environment.get(\"tournamentName_duplication\"));\r",
											"    pm.expect(tournamentNameError.source.pointer).to.eql(\"/attributes/name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"{{tournamentName_duplication}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"SINGLE\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path | Illegal Values",
					"item": [
						{
							"name": "Authentication tiver69 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-1\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-1\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-2\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-2\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ROUND\",\r\n        \"participantType\": \"SINGLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Players | Illegal Quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let quantityError = jsonData.errors.filter(error => error.status == \"FORBIDDEN_PARTICIPANT_QUANTITY\")[0];\r",
											"\r",
											"    pm.expect(quantityError).to.be.not.null;\r",
											"    pm.expect(quantityError.status).to.eql(\"FORBIDDEN_PARTICIPANT_QUANTITY\");\r",
											"    pm.expect(quantityError.code).to.eql(\"400\");\r",
											"    pm.expect(quantityError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(quantityError.detail).to.eql(\"Forbidden numbers of participants\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Players",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ROUND\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(2);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data.relationships.contests.length).to.eq(1);\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains same contests IDs as data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(1);\r",
											"\r",
											"    var contestIdsFromData = jsonData.data.relationships.contests.map(contest => contest.id);\r",
											"    var contestIdsFromIncluded = jsonData.included.filter(contest => contest.type === \"contestInfo\").map(contest => contest.id);\r",
											"    pm.expect(contestIdsFromData).to.deep.equal(contestIdsFromIncluded);\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"});\r",
											"pm.test(\"Included contains contests with correct players name\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(1);\r",
											"\r",
											"    var firstPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-1\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-1\")));\r",
											"    pm.expect(firstPlayerContests.length).to.eq(1);\r",
											"\r",
											"    var secondPlayerContests = jsonData.included.filter(contest => (contest.attributes.participantOne === pm.environment.get(\"playerName_tournament-2\")) || (contest.attributes.participantTwo === pm.environment.get(\"playerName_tournament-2\")));\r",
											"    pm.expect(secondPlayerContests.length).to.eq(1);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.contests[0].id);\r",
											"var contestInfo = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.contests[0].id)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-1\", contestInfo.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-1\", contestInfo.attributes.participantTwo);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Illegal Values | Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(2);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"PARTICIPANT_TYPE_UPDATE_FORBIDDEN\")[0];\r",
											"    let secondPlayerError = jsonData.errors.filter(error => error.status == \"TOURNAMENT_TYPE_UPDATE_FORBIDDEN\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"PARTICIPANT_TYPE_UPDATE_FORBIDDEN\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Can't change participant type when contests created\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/attributes/participantType\");\r",
											"\r",
											"    pm.expect(secondPlayerError).to.be.not.null;\r",
											"    pm.expect(secondPlayerError.status).to.eql(\"TOURNAMENT_TYPE_UPDATE_FORBIDDEN\");\r",
											"    pm.expect(secondPlayerError.code).to.eql(\"400\");\r",
											"    pm.expect(secondPlayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(secondPlayerError.detail).to.eql(\"Can't change tournament type when contests created\");\r",
											"    pm.expect(secondPlayerError.source.pointer).to.eql(\"/attributes/tournamentType\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"tournamentType\": \"ELIMINATION\",\r\n        \"participantType\": \"DOUBLE\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Illegal Value | BeginningDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"BEGINNING_DATE_UPDATE_FORBIDDEN\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"BEGINNING_DATE_UPDATE_FORBIDDEN\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Can't change beginning date when tournament in progress\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/attributes/beginningDate\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"status\": \"PLANNED\",\r\n        \"beginningDate\": \"2024-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Illegal Values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(7);\r",
											"\r",
											"    let gameLimitErrors = jsonData.errors.filter(error => error.status == \"GAME_LIMIT_EXCEEDED\");\r",
											"    pm.expect(gameLimitErrors.length).to.eql(2);\r",
											"    pm.expect(gameLimitErrors.map(error => error.source.pointer)).contains(\"/attributes/score/tieBreak\", \"/attributes/score/setTwo\");\r",
											"    pm.expect(gameLimitErrors.map(error => error.source.parameter)).contains(\"7:7\", \"10:8\");\r",
											"\r",
											"    let participantTwoScoreEmptyError = jsonData.errors.filter(error => error.status == \"PARTICIPANT_TWO_SCORE_EMPTY\");\r",
											"    pm.expect(participantTwoScoreEmptyError.length).to.eql(2);\r",
											"    pm.expect(participantTwoScoreEmptyError.map(error => error.source.pointer)).contains(\"/attributes/score/setOne/participantTwo\", \"/attributes/score/setThree/participantTwo\");\r",
											"\r",
											"    let participantOneScoreEmptyError = jsonData.errors.filter(error => error.status == \"PARTICIPANT_ONE_SCORE_EMPTY\");\r",
											"    pm.expect(participantOneScoreEmptyError.length).to.eql(1);\r",
											"    pm.expect(participantOneScoreEmptyError[0].status).to.eql(\"PARTICIPANT_ONE_SCORE_EMPTY\");\r",
											"    pm.expect(participantOneScoreEmptyError[0].code).to.eql(\"400\");\r",
											"    pm.expect(participantOneScoreEmptyError[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(participantOneScoreEmptyError[0].detail).to.eql(\"Participant One score number is required field\");\r",
											"    pm.expect(participantOneScoreEmptyError[0].source.pointer).to.eql(\"/attributes/score/setOne/participantOne\");\r",
											"\r",
											"    let participantOneTechDefeatEmptyError = jsonData.errors.filter(error => error.status == \"PARTICIPANT_ONE_TECH_DEFEAT_EMPTY\");\r",
											"    pm.expect(participantOneTechDefeatEmptyError.length).to.eql(1);\r",
											"    pm.expect(participantOneTechDefeatEmptyError[0].status).to.eql(\"PARTICIPANT_ONE_TECH_DEFEAT_EMPTY\");\r",
											"    pm.expect(participantOneTechDefeatEmptyError[0].code).to.eql(\"400\");\r",
											"    pm.expect(participantOneTechDefeatEmptyError[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(participantOneTechDefeatEmptyError[0].detail).to.eql(\"Tech defeat value should be provided for participant\");\r",
											"    pm.expect(participantOneTechDefeatEmptyError[0].source.pointer).to.eql(\"/attributes/techDefeat/participantOne\");\r",
											"\r",
											"    let participantTwoTechDefeatEmptyError = jsonData.errors.filter(error => error.status == \"PARTICIPANT_TWO_TECH_DEFEAT_EMPTY\");\r",
											"    pm.expect(participantTwoTechDefeatEmptyError.length).to.eql(1);\r",
											"    pm.expect(participantTwoTechDefeatEmptyError[0].status).to.eql(\"PARTICIPANT_TWO_TECH_DEFEAT_EMPTY\");\r",
											"    pm.expect(participantTwoTechDefeatEmptyError[0].code).to.eql(\"400\");\r",
											"    pm.expect(participantTwoTechDefeatEmptyError[0].title).to.eql(\"Bad request\");\r",
											"    pm.expect(participantTwoTechDefeatEmptyError[0].detail).to.eql(\"Tech defeat value should be provided for participant\");\r",
											"    pm.expect(participantTwoTechDefeatEmptyError[0].source.pointer).to.eql(\"/attributes/techDefeat/participantTwo\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\":{\r\n\r\n        },\r\n        \"score\" : {\r\n            \"setOne\":{\r\n\r\n            },\r\n            \"setTwo\":{\r\n                \"participantOne\": 10,\r\n                \"participantTwo\": 8\r\n            },\r\n            \"setThree\":{\r\n                \"participantOne\": 10\r\n            },\r\n            \"tieBreak\":{\r\n                \"participantOne\": 7,\r\n                \"participantTwo\": 7\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Illegal Values | Set One Score Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"SET_SCORE_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"SET_SCORE_EMPTY\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Set score must be provided\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/attributes/score/setOne\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"score\" : {\r\n            \"setTwo\":{\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\":{\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"tieBreak\":{\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Illegal Values | Set Two Score Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"SET_SCORE_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"SET_SCORE_EMPTY\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Set score must be provided\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/attributes/score/setTwo\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"score\" : {\r\n            \"setOne\":{\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\":{\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"tieBreak\":{\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Required Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"CONTEST_UPDATE_ATTRIBUTES_EMPTY\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"CONTEST_UPDATE_ATTRIBUTES_EMPTY\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"400\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Score or TechDefeat must be provided to update\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"/attributes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"NOT_FOUND\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Tournament not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Tournament with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"?tournamentId\");\r",
											"    pm.expect(firstPLayerError.source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"status\": \"PLANNED\",\r\n        \"beginningDate\": \"2024-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Contest Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"NOT_FOUND\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Contest not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Contest with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"?contestId\");\r",
											"    pm.expect(firstPLayerError.source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": true,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 4,\r\n                \"participantTwo\": 4\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/99999/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"99999",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Tournament Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"NOT_FOUND\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Tournament not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Tournament with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"?tournamentId\");\r",
											"    pm.expect(firstPLayerError.source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": true,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 4,\r\n                \"participantTwo\": 4\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/99999/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"99999",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Contest Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"NOT_FOUND\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Contest not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Contest with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"?contestId\");\r",
											"    pm.expect(firstPLayerError.source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contest | Tournament Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"NOT_FOUND\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Tournament not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Tournament with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"?tournamentId\");\r",
											"    pm.expect(firstPLayerError.source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/99999/contest/{{contestId-2}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"99999",
										"contest",
										"{{contestId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament | Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let firstPLayerError = jsonData.errors.filter(error => error.status == \"NOT_FOUND\")[0];\r",
											"\r",
											"    pm.expect(firstPLayerError).to.be.not.null;\r",
											"    pm.expect(firstPLayerError.status).to.eql(\"NOT_FOUND\");\r",
											"    pm.expect(firstPLayerError.code).to.eql(\"404\");\r",
											"    pm.expect(firstPLayerError.title).to.eql(\"Tournament not found\");\r",
											"    pm.expect(firstPLayerError.detail).to.eql(\"Tournament with provided id doesn't exist\");\r",
											"    pm.expect(firstPLayerError.source.pointer).to.eql(\"?tournamentId\");\r",
											"    pm.expect(firstPLayerError.source.parameter).to.eql(\"99999\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tournaments/99999",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"99999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Path | Elimination",
					"item": [
						{
							"name": "Authentication tiver69",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"accessToken\", jsonData.accessToken);\r",
											"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"username\" : \"tiver69\",\r\n\t\"password\" : \"tiver69\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-1\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-1\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest1-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest1-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "2nd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-2\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-2\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest2-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest2-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "3rd Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-3\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-3\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest3-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest3-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "4th Player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Player created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.firstName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.lastName).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.leadingHand).to.eql(\"RIGHT\");\r",
											"    var now = require('moment');\r",
											"    pm.expect(jsonData.data.attributes.age).to.eql(now().format(\"YYYY\") - 1999);\r",
											"    pm.expect(jsonData.data.attributes.experience).to.eql(now().format(\"YYYY\") - 2009);\r",
											"});\r",
											"pm.test(\"Links generated correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/participants/players/\" + jsonData.data.id);\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"playerId_tournament-4\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"playerName_tournament-4\", jsonData.data.attributes.firstName+ \" \" + jsonData.data.attributes.lastName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"player\",\r\n    \"attributes\": {\r\n        \"firstName\": \"PostTest4-{{$timestamp}}\",\r\n        \"lastName\": \"PostTest4-{{$timestamp}}\",\r\n        \"birthDate\": \"1999-03-17\",\r\n        \"experienceYear\": \"2009\",\r\n        \"leadingHand\": \"RIGHT\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/participants/players",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"participants",
										"players"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament created correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).not.to.be.null;\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(0);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships).to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included is empty for tournament without contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.undefined;\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\": \"tournament\",\r\n    \"attributes\": {\r\n        \"name\": \"PostTest-{{$timestamp}}\",\r\n        \"tournamentType\": \"ELIMINATION\",\r\n        \"participantType\": \"SINGLE\",\r\n        \"status\": \"IN_PROGRESS\",\r\n        \"beginningDate\": \"2022-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Players | Illegal Quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let quantityError = jsonData.errors.filter(error => error.status == \"FORBIDDEN_PARTICIPANT_QUANTITY\")[0];\r",
											"\r",
											"    pm.expect(quantityError).to.be.not.null;\r",
											"    pm.expect(quantityError.status).to.eql(\"FORBIDDEN_PARTICIPANT_QUANTITY\");\r",
											"    pm.expect(quantityError.code).to.eql(\"400\");\r",
											"    pm.expect(quantityError.title).to.eql(\"Bad request\");\r",
											"    pm.expect(quantityError.detail).to.eql(\"Forbidden numbers of participants\");\r",
											"    pm.expect(quantityError.source.parameter).to.eql(\"0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Four Players",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Tournament information updated with relationships and participantNumber correctly\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).not.to.be.null;\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.name).to.be.eq(pm.environment.get(\"tournamentName\"));\r",
											"    pm.expect(jsonData.data.attributes.tournamentType).to.eql(\"ELIMINATION\");\r",
											"    pm.expect(jsonData.data.attributes.participantType).to.eql(\"SINGLE\");\r",
											"    pm.expect(jsonData.data.attributes.status).to.eql(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data.attributes.beginningDate).to.eql(\"2022-01-01\");\r",
											"    pm.expect(jsonData.data.attributes.participantsNumber).to.eql(4);\r",
											"    pm.expect(jsonData.data.attributes.progress).to.eql(0);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.contests).to.be.undefined;\r",
											"    pm.expect(jsonData.data.relationships.finalContest).not.to.be.undefined;\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included has final contest as eliminationContestInfo same as from data.relationships and its parent contests\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(3);\r",
											"\r",
											"    var finalContestIdsFromData = jsonData.data.relationships.finalContest.id;\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === finalContestIdsFromData);\r",
											"    pm.expect(finalContestFromIncluded.length).to.eql(1);\r",
											"    pm.expect(finalContestFromIncluded[0].type).to.eql(\"eliminationContestInfo\");\r",
											"    pm.expect(finalContestFromIncluded[0].attributes).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Included contains parent contests with correct players name and links\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var finalContestFromIncluded = jsonData.included.filter(contest => contest.id === jsonData.data.relationships.finalContest.id)[0];\r",
											"\r",
											"    var firstParentContestId = finalContestFromIncluded.relationships.firstParentContest.id;\r",
											"    var firstParentContest = jsonData.included.filter(contest => contest.id === firstParentContestId);\r",
											"    pm.expect(firstParentContest.length).to.eql(1);\r",
											"    pm.expect(firstParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(firstParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-1\"));\r",
											"    pm.expect(firstParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-2\"));\r",
											"\r",
											"    var secondParentContestId = finalContestFromIncluded.relationships.secondParentContest.id;\r",
											"    var secondParentContest = jsonData.included.filter(contest => contest.id === secondParentContestId);\r",
											"    pm.expect(secondParentContest.length).to.eql(1);\r",
											"    pm.expect(secondParentContest[0].type).to.eql(\"contestInfo\");\r",
											"    pm.expect(secondParentContest[0].attributes.participantOne).to.eql(pm.environment.get(\"playerName_tournament-3\"));\r",
											"    pm.expect(secondParentContest[0].attributes.participantTwo).to.eql(pm.environment.get(\"playerName_tournament-4\"));\r",
											"\r",
											"    jsonData.included.forEach(contest => {\r",
											"        pm.expect(contest.links.self).to.eq(\"/tournaments/\" + jsonData.data.id + \"/contests/\" + contest.id)\r",
											"    });\r",
											"    jsonData.included.filter(contest => contest.type === \"contestInfo\").forEach(contest => {\r",
											"        pm.expect(contest.attributes.techDefeat).not.to.be.undefined;\r",
											"        pm.expect(contest.attributes.techDefeat.participantOne).to.eq(false);\r",
											"        pm.expect(contest.attributes.techDefeat.participantTwo).to.eq(false);\r",
											"    });\r",
											"});\r",
											"\r",
											"//---------------------     SAVE DATA     -----------------------\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"tournamentId\", jsonData.data.id);\r",
											"postman.setEnvironmentVariable(\"tournamentName\", jsonData.data.attributes.name);\r",
											"\r",
											"postman.setEnvironmentVariable(\"contestId-1\", jsonData.data.relationships.finalContest.id);\r",
											"\r",
											"var firstParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.firstParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-2\", firstParentContestId);\r",
											"var firstParentContest = jsonData.included.filter(contestInfo => contestInfo.id === firstParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-2\", firstParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-2\", firstParentContest.attributes.participantTwo);\r",
											"\r",
											"var secondParentContestId = jsonData.included.filter(contestInfo => contestInfo.id === jsonData.data.relationships.finalContest.id)[0].relationships.secondParentContest.id;\r",
											"postman.setEnvironmentVariable(\"contestId-3\", secondParentContestId);\r",
											"var secondParentContest = jsonData.included.filter(contestInfo => contestInfo.id === secondParentContestId)[0];\r",
											"postman.setEnvironmentVariable(\"participantOneName_contest-3\", secondParentContest.attributes.participantOne);\r",
											"postman.setEnvironmentVariable(\"participantTwoName_contest-3\", secondParentContest.attributes.participantTwo);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{tournamentId}},\r\n    \"type\": \"tournament\",\r\n    \"relationships\": {\r\n        \"participants\": [\r\n            {\r\n                \"id\": {{playerId_tournament-1}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-2}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-3}},\r\n                \"type\": \"player\"\r\n            },\r\n            {\r\n                \"id\": {{playerId_tournament-4}},\r\n                \"type\": \"player\"\r\n            }\r\n        ]\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/enroll",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest | Without Parent's result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let error = jsonData.errors.filter(error => error.status == \"CONTEST_NOT_REACHED\")[0];\r",
											"\r",
											"    pm.expect(error).to.be.not.null;\r",
											"    pm.expect(error.status).to.eql(\"CONTEST_NOT_REACHED\");\r",
											"    pm.expect(error.code).to.eql(\"403\");\r",
											"    pm.expect(error.title).to.eql(\"Forbidden\");\r",
											"    pm.expect(error.detail).to.eql(\"Contest can't have result before its parent contest\");\r",
											"    pm.expect(error.source.pointer).to.eql(\"?contestId\");\r",
											"    pm.expect(error.source.parameter).to.eql(pm.environment.get(\"contestId-1\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Parent Contest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-2\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-2\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-2\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-2}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest | Without One Parent result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let error = jsonData.errors.filter(error => error.status == \"CONTEST_NOT_REACHED\")[0];\r",
											"\r",
											"    pm.expect(error).to.be.not.null;\r",
											"    pm.expect(error.status).to.eql(\"CONTEST_NOT_REACHED\");\r",
											"    pm.expect(error.code).to.eql(\"403\");\r",
											"    pm.expect(error.title).to.eql(\"Forbidden\");\r",
											"    pm.expect(error.detail).to.eql(\"Contest can't have result before its parent contest\");\r",
											"    pm.expect(error.source.pointer).to.eql(\"?contestId\");\r",
											"    pm.expect(error.source.parameter).to.eql(pm.environment.get(\"contestId-1\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "2st Parent Contest | Full Tech Defeat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let error = jsonData.errors.filter(error => error.status == \"CONTEST_FULL_TECH_DEFEAT_FORBIDDEN\")[0];\r",
											"\r",
											"    pm.expect(error).to.be.not.null;\r",
											"    pm.expect(error.status).to.eql(\"CONTEST_FULL_TECH_DEFEAT_FORBIDDEN\");\r",
											"    pm.expect(error.code).to.eql(\"403\");\r",
											"    pm.expect(error.title).to.eql(\"Forbidden\");\r",
											"    pm.expect(error.detail).to.eql(\"Elimination contest can't be full tech defeat\");\r",
											"    pm.expect(error.source.pointer).to.eql(\"?contestId\");\r",
											"    pm.expect(error.source.parameter).to.eql(pm.environment.get(\"contestId-3\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-3}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": true,\r\n            \"participantTwo\": true\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-3}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-3}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "2st Parent Contest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-3\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantOneName_contest-3\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-3\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-3}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-3}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-3}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Final Contest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contest information retrieved correctly with compliete score\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.data.id).to.be.eq(parseInt(pm.environment.get(\"contestId-1\")));\r",
											"\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantOne).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.techDefeat.participantTwo).to.be.eq(false);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setOne.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantOne).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.setTwo.participantTwo).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantOne).to.be.eq(1);\r",
											"    pm.expect(jsonData.data.attributes.score.setThree.participantTwo).to.be.eq(6);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantOne).to.be.eq(5);\r",
											"    pm.expect(jsonData.data.attributes.score.tieBreak.participantTwo).to.be.eq(6);\r",
											"\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.participantOne.id).not.to.be.null;\r",
											"    pm.expect(jsonData.data.relationships.participantOne.type).to.be.eq(\"player\");\r",
											"    pm.expect(jsonData.data.relationships.winner.id).to.be.eq(jsonData.data.relationships.participantTwo.id);\r",
											"    pm.expect(jsonData.data.relationships.winner.type).to.be.eq(\"player\");\r",
											"\r",
											"    pm.expect(jsonData.data.links.self).to.eql(\"/tournaments/\" + pm.environment.get(\"tournamentId\") + \"/contests/\" + jsonData.data.id);\r",
											"});\r",
											"pm.test(\"Included contains correct players with IDs from data.relationships\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.included).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.included.length).to.eq(2);\r",
											"\r",
											"    var playerOneId = jsonData.data.relationships.participantOne.id;\r",
											"    var playerTwoId = jsonData.data.relationships.participantTwo.id;\r",
											"    var playerIdsFromIncluded = jsonData.included.filter(player => player.type === \"player\").map(player => player.id);\r",
											"    pm.expect(playerIdsFromIncluded).to.include(playerOneId, playerTwoId);\r",
											"\r",
											"    var playerOne = jsonData.included.filter(player => player.id === playerOneId)[0];\r",
											"    pm.expect(playerOne.attributes.firstName + \" \" + playerOne.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-2\"));\r",
											"    var playerTwo = jsonData.included.filter(player => player.id === playerTwoId)[0];\r",
											"    pm.expect(playerTwo.attributes.firstName + \" \" + playerTwo.attributes.lastName).to.be.eq(pm.environment.get(\"participantTwoName_contest-3\"));\r",
											"\r",
											"    jsonData.included.forEach(player => {\r",
											"        pm.expect(player.links.self).to.eq(\"/participants/players/\" + player.id)\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-1}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-1}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-1}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "1st Parent Contest | With child result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.errors.length).to.eq(1);\r",
											"\r",
											"    let error = jsonData.errors.filter(error => error.status == \"CONTEST_SCORE_UPDATE_FORBIDDEN\")[0];\r",
											"\r",
											"    pm.expect(error).to.be.not.null;\r",
											"    pm.expect(error.status).to.eql(\"CONTEST_SCORE_UPDATE_FORBIDDEN\");\r",
											"    pm.expect(error.code).to.eql(\"403\");\r",
											"    pm.expect(error.title).to.eql(\"Forbidden\");\r",
											"    pm.expect(error.detail).to.eql(\"Contest update forbidden when child contest has result\");\r",
											"    pm.expect(error.source.pointer).to.eql(\"?contestId\");\r",
											"    pm.expect(error.source.parameter).to.eql(pm.environment.get(\"contestId-2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{contestId-2}},\r\n    \"type\": \"contest\",\r\n    \"attributes\": {\r\n        \"techDefeat\": {\r\n            \"participantOne\": false,\r\n            \"participantTwo\": false\r\n        },\r\n        \"score\": {\r\n            \"setOne\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"setTwo\": {\r\n                \"participantOne\": 6,\r\n                \"participantTwo\": 1\r\n            },\r\n            \"setThree\": {\r\n                \"participantOne\": 1,\r\n                \"participantTwo\": 6\r\n            },\r\n            \"tieBreak\": {\r\n                \"participantOne\": 5,\r\n                \"participantTwo\": 6\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/contest/{{contestId-2}}/score",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"contest",
										"{{contestId-2}}",
										"score"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Participant | Elimination Tournament",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", () => {\r",
											"    pm.response.to.have.status(501);\r",
											"});\r",
											"pm.test(\"Required Errors Present In Response\", () => {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    pm.expect(jsonData.errors).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(jsonData.errors[0].status).to.eql(\"UNSUPPORTED_OPERATION\");\r",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"501\");\r",
											"    pm.expect(jsonData.errors[0].title).to.eql(\"Not implemented\");\r",
											"    pm.expect(jsonData.errors[0].detail).to.eql(\"Current tournament type is not supported yet\");\r",
											"    pm.expect(jsonData.errors[0].source.parameter).to.eql(\"ELIMINATION\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "{{contentType}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/tournaments/{{tournamentId}}/withdraw/{{playerId_tournament-1}}?techDefeat=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tournaments",
										"{{tournamentId}}",
										"withdraw",
										"{{playerId_tournament-1}}"
									],
									"query": [
										{
											"key": "techDefeat",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}